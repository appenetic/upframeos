<!DOCTYPE html>
<html>
<head>
  <title>Canvas</title>
<style>
  #content-wrapper {
    position: relative;
    width: 100%;
    height: 100vh; /* Adjust based on your content's needs */
    overflow: hidden; /* Optional, to keep everything contained */
  }

  .content {
    position: absolute;
    width: 100%;
    top: 0;
    left: 0;
    opacity: 0; /* Start invisible */
    transform: scale(0.95); /* Start slightly scaled down */
    filter: blur(5px); /* Start slightly blurred */
    transition: opacity 0.5s ease, transform 0.5s ease, filter 0.5s ease; /* Smooth transitions for properties */
  }

  .content.visible {
    opacity: 1;
    transform: scale(1); /* Scale to normal size */
    filter: blur(0); /* Remove blur */
  }
</style>
</head>
<body>
<div id="content-wrapper">
  <!-- Initial content can be loaded here with 'content' class and made visible -->
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
$(document).ready(function() {
  let lastContent = ''; // Initialize variable to store the last loaded content
  let isWaiting = false; // Debounce flag

  // Initial content load
  updateContent();

  // Periodic update with debouncing
  setInterval(() => {
    if (!isWaiting) {
      updateContent();
    }
  }, 20000); // Adjusted to 20 seconds for demonstration

  function updateContent() {
    isWaiting = true; // Set the debounce flag

    $.ajax({
      url: '/content',
      success: function(htmlContent) {
        if (htmlContent !== lastContent) {
          var $newContent = $('<div>', {
            html: htmlContent,
            class: 'content'
          }).appendTo('#content-wrapper');

          // Transition in new content
          requestAnimationFrame(() => {
            $newContent.addClass('visible');

            // Remove old content after transition
            $('.content').not($newContent).one('transitionend', function() {
              $(this).remove();
            });

            lastContent = htmlContent; // Update lastContent with the new content
          });
        }

        // Reset the debounce flag after a delay
        setTimeout(() => {
          isWaiting = false;
        }, 20000); // Wait 5 seconds before allowing another update
      }
    });
  }
});
</script>

</body>
</html>
